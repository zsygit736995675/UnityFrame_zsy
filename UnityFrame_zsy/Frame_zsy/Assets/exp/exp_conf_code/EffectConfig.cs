using System;using System.Collections.Generic;using UnityEngine;public class EffectConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, EffectConfig> dic = new Dictionary<int, EffectConfig>();    public static List<EffectConfig> array = new List<EffectConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly string name;    public readonly string resname;    public readonly int placetype;    public readonly float scale;    public readonly bool loop;    public readonly int level;    public readonly int type;    public EffectConfig(int id, string name, string resname, int placetype, float scale, bool loop, int level, int type)    {        this.id = id;        this.name = name;        this.resname = resname;        this.placetype = placetype;        this.scale = scale;        this.loop = loop;        this.level = level;        this.type = type;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "EffectConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 8)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 8);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {        int id = rs.ReadInt();        string name = rs.ReadString();        string resname = rs.ReadString();        int placetype = rs.ReadInt();        float scale = rs.ReadFloat();        bool loop = rs.ReadBool();        int level = rs.ReadInt();        int type = rs.ReadInt();        EffectConfig new_obj_EffectConfig = new EffectConfig(id, name, resname, placetype, scale, loop, level, type);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_EffectConfig);        array.Add(new_obj_EffectConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("EffectConfig.bytes");		OnLoadFile(data);    }    public static EffectConfig GetConfig( int id )    {    	EffectConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}