using System;using System.Collections.Generic;using UnityEngine;public class GDailyTaskGiftConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, GDailyTaskGiftConfig> dic = new Dictionary<int, GDailyTaskGiftConfig>();    public static List<GDailyTaskGiftConfig> array = new List<GDailyTaskGiftConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly int type;    public readonly int activeness;    public readonly int priceType;    public readonly int price;    public GDailyTaskGiftConfig(int id, int type, int activeness, int priceType, int price)    {        this.id = id;        this.type = type;        this.activeness = activeness;        this.priceType = priceType;        this.price = price;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "GDailyTaskGiftConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 5)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 5);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {        int id = rs.ReadInt();        int type = rs.ReadInt();        int activeness = rs.ReadInt();        int priceType = rs.ReadInt();        int price = rs.ReadInt();        GDailyTaskGiftConfig new_obj_GDailyTaskGiftConfig = new GDailyTaskGiftConfig(id, type, activeness, priceType, price);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_GDailyTaskGiftConfig);        array.Add(new_obj_GDailyTaskGiftConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("GDailyTaskGiftConfig.bytes");		OnLoadFile(data);    }    public static GDailyTaskGiftConfig GetConfig( int id )    {    	GDailyTaskGiftConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}