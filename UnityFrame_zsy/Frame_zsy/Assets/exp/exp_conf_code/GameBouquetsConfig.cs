using System;using System.Collections.Generic;using UnityEngine;public class GameBouquetsConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, GameBouquetsConfig> dic = new Dictionary<int, GameBouquetsConfig>();    public static List<GameBouquetsConfig> array = new List<GameBouquetsConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly int type;    public readonly string name;    public readonly string blessWord;    public readonly int[] flowerTypeList;    public readonly int[] flowerNumList;    public readonly int starAward;    public readonly int extraAwardPct;    public GameBouquetsConfig(int id, int type, string name, string blessWord, int[] flowerTypeList, int[] flowerNumList, int starAward, int extraAwardPct)    {        this.id = id;        this.type = type;        this.name = name;        this.blessWord = blessWord;        this.flowerTypeList = flowerTypeList;        this.flowerNumList = flowerNumList;        this.starAward = starAward;        this.extraAwardPct = extraAwardPct;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "GameBouquetsConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 8)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 8);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {            int arr_item_len_GameBouquetsConfig;        int id = rs.ReadInt();        int type = rs.ReadInt();        string name = rs.ReadString();        string blessWord = rs.ReadString();        arr_item_len_GameBouquetsConfig = rs.ReadShort();        int[] flowerTypeList = new int [arr_item_len_GameBouquetsConfig];        for(int i = 0; i < arr_item_len_GameBouquetsConfig; ++i)            flowerTypeList[i] = rs.ReadInt();        arr_item_len_GameBouquetsConfig = rs.ReadShort();        int[] flowerNumList = new int [arr_item_len_GameBouquetsConfig];        for(int i = 0; i < arr_item_len_GameBouquetsConfig; ++i)            flowerNumList[i] = rs.ReadInt();        int starAward = rs.ReadInt();        int extraAwardPct = rs.ReadInt();        GameBouquetsConfig new_obj_GameBouquetsConfig = new GameBouquetsConfig(id, type, name, blessWord, flowerTypeList, flowerNumList, starAward, extraAwardPct);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_GameBouquetsConfig);        array.Add(new_obj_GameBouquetsConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("GameBouquetsConfig.bytes");		OnLoadFile(data);    }    public static GameBouquetsConfig GetConfig( int id )    {    	GameBouquetsConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}