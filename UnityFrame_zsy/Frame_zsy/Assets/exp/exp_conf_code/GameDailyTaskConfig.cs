using System;using System.Collections.Generic;using UnityEngine;public class GameDailyTaskConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, GameDailyTaskConfig> dic = new Dictionary<int, GameDailyTaskConfig>();    public static List<GameDailyTaskConfig> array = new List<GameDailyTaskConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly int type;    public readonly string title;    public readonly int activeness;    public readonly int total;    public readonly int[] closeViewIds;    public readonly int[] openViewIds;    public readonly int[] openViewParam;    public GameDailyTaskConfig(int id, int type, string title, int activeness, int total, int[] closeViewIds, int[] openViewIds, int[] openViewParam)    {        this.id = id;        this.type = type;        this.title = title;        this.activeness = activeness;        this.total = total;        this.closeViewIds = closeViewIds;        this.openViewIds = openViewIds;        this.openViewParam = openViewParam;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "GameDailyTaskConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 8)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 8);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {            int arr_item_len_GameDailyTaskConfig;        int id = rs.ReadInt();        int type = rs.ReadInt();        string title = rs.ReadString();        int activeness = rs.ReadInt();        int total = rs.ReadInt();        arr_item_len_GameDailyTaskConfig = rs.ReadShort();        int[] closeViewIds = new int [arr_item_len_GameDailyTaskConfig];        for(int i = 0; i < arr_item_len_GameDailyTaskConfig; ++i)            closeViewIds[i] = rs.ReadInt();        arr_item_len_GameDailyTaskConfig = rs.ReadShort();        int[] openViewIds = new int [arr_item_len_GameDailyTaskConfig];        for(int i = 0; i < arr_item_len_GameDailyTaskConfig; ++i)            openViewIds[i] = rs.ReadInt();        arr_item_len_GameDailyTaskConfig = rs.ReadShort();        int[] openViewParam = new int [arr_item_len_GameDailyTaskConfig];        for(int i = 0; i < arr_item_len_GameDailyTaskConfig; ++i)            openViewParam[i] = rs.ReadInt();        GameDailyTaskConfig new_obj_GameDailyTaskConfig = new GameDailyTaskConfig(id, type, title, activeness, total, closeViewIds, openViewIds, openViewParam);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_GameDailyTaskConfig);        array.Add(new_obj_GameDailyTaskConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("GameDailyTaskConfig.bytes");		OnLoadFile(data);    }    public static GameDailyTaskConfig GetConfig( int id )    {    	GameDailyTaskConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}