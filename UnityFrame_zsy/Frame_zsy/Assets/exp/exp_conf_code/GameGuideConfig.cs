using System;using System.Collections.Generic;using UnityEngine;public class GameGuideConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, GameGuideConfig> dic = new Dictionary<int, GameGuideConfig>();    public static List<GameGuideConfig> array = new List<GameGuideConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly int nextId;    public readonly bool isRoleAction;    public readonly float[] startPos;    public readonly float[] endPos;    public readonly string msg;    public readonly float[] msgPos;    public readonly bool isInvert;    public readonly float handRotation;    public GameGuideConfig(int id, int nextId, bool isRoleAction, float[] startPos, float[] endPos, string msg, float[] msgPos, bool isInvert, float handRotation)    {        this.id = id;        this.nextId = nextId;        this.isRoleAction = isRoleAction;        this.startPos = startPos;        this.endPos = endPos;        this.msg = msg;        this.msgPos = msgPos;        this.isInvert = isInvert;        this.handRotation = handRotation;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "GameGuideConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 9)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 9);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {            int arr_item_len_GameGuideConfig;        int id = rs.ReadInt();        int nextId = rs.ReadInt();        bool isRoleAction = rs.ReadBool();        arr_item_len_GameGuideConfig = rs.ReadShort();        float[] startPos = new float [arr_item_len_GameGuideConfig];        for(int i = 0; i < arr_item_len_GameGuideConfig; ++i)            startPos[i] = rs.ReadFloat();        arr_item_len_GameGuideConfig = rs.ReadShort();        float[] endPos = new float [arr_item_len_GameGuideConfig];        for(int i = 0; i < arr_item_len_GameGuideConfig; ++i)            endPos[i] = rs.ReadFloat();        string msg = rs.ReadString();        arr_item_len_GameGuideConfig = rs.ReadShort();        float[] msgPos = new float [arr_item_len_GameGuideConfig];        for(int i = 0; i < arr_item_len_GameGuideConfig; ++i)            msgPos[i] = rs.ReadFloat();        bool isInvert = rs.ReadBool();        float handRotation = rs.ReadFloat();        GameGuideConfig new_obj_GameGuideConfig = new GameGuideConfig(id, nextId, isRoleAction, startPos, endPos, msg, msgPos, isInvert, handRotation);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_GameGuideConfig);        array.Add(new_obj_GameGuideConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("GameGuideConfig.bytes");		OnLoadFile(data);    }    public static GameGuideConfig GetConfig( int id )    {    	GameGuideConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}