using System;using System.Collections.Generic;using UnityEngine;public class GuiConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, GuiConfig> dic = new Dictionary<int, GuiConfig>();    public static List<GuiConfig> array = new List<GuiConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly string ResName;    public readonly string text;    public readonly int[] exclusion;    public readonly int[] hidemainui;    public readonly bool ReadyToLoad;    public readonly bool switchSceneIsClose;    public readonly bool showloading;    public readonly string AudioOfOpen;    public readonly string AudioOfClose;    public readonly bool CanToTop;    public GuiConfig(int id, string ResName, string text, int[] exclusion, int[] hidemainui, bool ReadyToLoad, bool switchSceneIsClose, bool showloading, string AudioOfOpen, string AudioOfClose, bool CanToTop)    {        this.id = id;        this.ResName = ResName;        this.text = text;        this.exclusion = exclusion;        this.hidemainui = hidemainui;        this.ReadyToLoad = ReadyToLoad;        this.switchSceneIsClose = switchSceneIsClose;        this.showloading = showloading;        this.AudioOfOpen = AudioOfOpen;        this.AudioOfClose = AudioOfClose;        this.CanToTop = CanToTop;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "GuiConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 11)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 11);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {            int arr_item_len_GuiConfig;        int id = rs.ReadInt();        string ResName = rs.ReadString();        string text = rs.ReadString();        arr_item_len_GuiConfig = rs.ReadShort();        int[] exclusion = new int [arr_item_len_GuiConfig];        for(int i = 0; i < arr_item_len_GuiConfig; ++i)            exclusion[i] = rs.ReadInt();        arr_item_len_GuiConfig = rs.ReadShort();        int[] hidemainui = new int [arr_item_len_GuiConfig];        for(int i = 0; i < arr_item_len_GuiConfig; ++i)            hidemainui[i] = rs.ReadInt();        bool ReadyToLoad = rs.ReadBool();        bool switchSceneIsClose = rs.ReadBool();        bool showloading = rs.ReadBool();        string AudioOfOpen = rs.ReadString();        string AudioOfClose = rs.ReadString();        bool CanToTop = rs.ReadBool();        GuiConfig new_obj_GuiConfig = new GuiConfig(id, ResName, text, exclusion, hidemainui, ReadyToLoad, switchSceneIsClose, showloading, AudioOfOpen, AudioOfClose, CanToTop);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_GuiConfig);        array.Add(new_obj_GuiConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("GuiConfig.bytes");		OnLoadFile(data);    }    public static GuiConfig GetConfig( int id )    {    	GuiConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}