using System;using System.Collections.Generic;using UnityEngine;public class RoleConfig : BaseConfig{    public static bool resLoaded = false;    private static Dictionary<int, RoleConfig> dic = new Dictionary<int, RoleConfig>();    public static List<RoleConfig> array = new List<RoleConfig>();    public static void Init()    {        LoadRes();    }    public readonly int id;    public readonly string name;    public readonly string res;    public readonly string path;    public readonly int version;    public readonly int mtype;    public RoleConfig(int id, string name, string res, string path, int version, int mtype)    {        this.id = id;        this.name = name;        this.res = res;        this.path = path;        this.version = version;        this.mtype = mtype;    }    private static void OnLoadFile( byte[] data)    { 		ReadStream rs = new ReadStream(data);        /*int file_len = */rs.ReadInt();        string flag = rs.ReadString();        if(flag != "RoleConfig")        {            LogWarning("invalid file flag" + flag);            return;        }        int col_cnt = rs.ReadShort();        if(col_cnt != 6)        {            LogWarning("col cnt invalid" + col_cnt + " : " + 6);            return;        }        int row_cnt = rs.ReadInt();        for(int i = 0; i < row_cnt; i++)        {            Add_Item(rs);        }        resLoaded = true;    }    private static void Add_Item(ReadStream rs)    {        int id = rs.ReadInt();        string name = rs.ReadString();        string res = rs.ReadString();        string path = rs.ReadString();        int version = rs.ReadInt();        int mtype = rs.ReadInt();        RoleConfig new_obj_RoleConfig = new RoleConfig(id, name, res, path, version, mtype);                if(dic.ContainsKey(id))        {            LogWarning("duplicate key: " + id);            return;        }        dic.Add(id, new_obj_RoleConfig);        array.Add(new_obj_RoleConfig);    }    private static void LoadRes()    {        if(resLoaded) return;        byte[] data = GetAsset("RoleConfig.bytes");		OnLoadFile(data);    }    public static RoleConfig GetConfig( int id )    {    	RoleConfig config;    	if ( dic.TryGetValue(id, out config ) )    	{    		return config;    	}    	else    	{    		return null;    	}    }}